// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDataDumper.Data;

#nullable disable

namespace TestDataDumper.Data.Migrations
{
    [DbContext(typeof(DumperContext))]
    [Migration("20230915180507_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestDataDumper.Data.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Street2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4fd2b47-8d09-4c17-ad4c-26ef61b2de17"),
                            City = "Johns Creek",
                            Country = "USA",
                            State = "GA",
                            Street = "123 Main Street",
                            Street2 = "Suite 100",
                            Zip = "30022"
                        },
                        new
                        {
                            Id = new Guid("59f1f53b-5af5-434e-9215-581cbe98b106"),
                            City = "Roswell",
                            Country = "USA",
                            State = "GA",
                            Street = "456 Second Ave.",
                            Zip = "30076"
                        },
                        new
                        {
                            Id = new Guid("887257ed-a55c-4837-bf23-ac2c74f6c65a"),
                            City = "Atlanta",
                            Country = "USA",
                            State = "GA",
                            Street = "789 Third Street NE",
                            Street2 = "Apt. 210",
                            Zip = "30319"
                        });
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa79a427-a880-4823-b6ab-be06184c2010"),
                            AddressId = new Guid("e4fd2b47-8d09-4c17-ad4c-26ef61b2de17"),
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("412dfae8-e2e0-47f3-9762-c32004c97115"),
                            AddressId = new Guid("e4fd2b47-8d09-4c17-ad4c-26ef61b2de17"),
                            FirstName = "Jane",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("74c150a1-29a8-44d7-a12b-21d41b5367ec"),
                            AddressId = new Guid("59f1f53b-5af5-434e-9215-581cbe98b106"),
                            FirstName = "Rebecca",
                            LastName = "Lane"
                        },
                        new
                        {
                            Id = new Guid("4eb9c29b-d843-46d8-826e-a5821f8ac4f6"),
                            AddressId = new Guid("887257ed-a55c-4837-bf23-ac2c74f6c65a"),
                            FirstName = "James",
                            LastName = "Maxwell"
                        });
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da94a5b8-9a64-4e26-87fb-6ed48a6698a7"),
                            Name = "Munson"
                        },
                        new
                        {
                            Id = new Guid("0ede9947-28af-489f-b15d-658a4df73c8f"),
                            Name = "Skipper"
                        });
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.PetOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PetId");

                    b.ToTable("PetOwners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e932ab2-36d3-42df-8bbb-48363142aa59"),
                            OwnerId = new Guid("fa79a427-a880-4823-b6ab-be06184c2010"),
                            PetId = new Guid("da94a5b8-9a64-4e26-87fb-6ed48a6698a7")
                        },
                        new
                        {
                            Id = new Guid("3d968eb0-bcbe-4cbd-8ff0-9def9f3c6ff4"),
                            OwnerId = new Guid("412dfae8-e2e0-47f3-9762-c32004c97115"),
                            PetId = new Guid("da94a5b8-9a64-4e26-87fb-6ed48a6698a7")
                        },
                        new
                        {
                            Id = new Guid("0b1d9377-47cf-49b8-8b72-a9b7db3877c4"),
                            OwnerId = new Guid("4eb9c29b-d843-46d8-826e-a5821f8ac4f6"),
                            PetId = new Guid("0ede9947-28af-489f-b15d-658a4df73c8f")
                        });
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Person", b =>
                {
                    b.HasOne("TestDataDumper.Data.Entities.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_People_Addresses");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.PetOwner", b =>
                {
                    b.HasOne("TestDataDumper.Data.Entities.Person", "Owner")
                        .WithMany("PetOwners")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_PetOwners_People");

                    b.HasOne("TestDataDumper.Data.Entities.Pet", "Pet")
                        .WithMany("PetOwners")
                        .HasForeignKey("PetId")
                        .IsRequired()
                        .HasConstraintName("FK_PetOwners_Pets");

                    b.Navigation("Owner");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Address", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Person", b =>
                {
                    b.Navigation("PetOwners");
                });

            modelBuilder.Entity("TestDataDumper.Data.Entities.Pet", b =>
                {
                    b.Navigation("PetOwners");
                });
#pragma warning restore 612, 618
        }
    }
}
